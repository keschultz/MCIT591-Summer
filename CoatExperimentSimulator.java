import java.util.Arrays;

/**
 * This Class will simulate the famous derangements problem. There will be 25
 * people in the simulation who get their coats back from a coat room randomly each time experiment is run.
 * 
 * @author Karl Schultz
 *
 */

public class CoatExperimentSimulator { // declare class CoatExperimentSimulator with one instance variable
										// numberOfPeople
	int numberOfPeople;

	public CoatExperimentSimulator(int numPpl) {
		numberOfPeople = numPpl;
	}

	/**
	 * This method is a "getter" to return the # of people in the object created
	 * using class CoatExperimentSimulator declaration in the main class code block.
	 * 
	 * @return numberOfPeople
	 */

	public int getNumberOfPeople() {
		return numberOfPeople;
	}

	/**
	 * method numPplWhoGotTheirCoat takes in an integer array named permutation as
	 * the argument. permutation is an array with the same length as the # of people
	 * in the experiment. permutation is a random order of integers showing which
	 * coat each person received back. from this array we will look at each element
	 * in the array and decide if that person got their correct coat.
	 * 
	 * @param permutation
	 * @return
	 */
	public int numPplWhoGotTheirCoat(int[] permutation) {
		int counter = 0; // set a counter to keep count for each person who got correct coat back

		for (int i = 0; i < permutation.length; i++) // check each element in the array
			if (permutation[i] == i + 1) { // at index 0 should be person 1's coat, index 1 should be person 2's coat, etc.  
				counter++;
			}
		return counter;    
	}
		
		
	/**
	 * Method simulateCoatExperiment simulates the coat problem 100,000 times as
	 * asked in the assignment and // returns an array with each element storing the
	 * number of people who got their coat back in each experiment iteration.
	 * 
	 * @param iterations
	 */

	public int[] simulateCoatExperiment(int iterations) { // iterations is the # of experiments to run passed into
															// method
		int[] experimentResults = new int[iterations]; // create an array experimentResults with length sufficient to store each
														// experiment result in each element of the array

		for (int i = 0; i < iterations; i++) // run the experiment repeatedly up to the # experiments needed

			experimentResults[i] = numPplWhoGotTheirCoat(RandomOrderGenerator.getRandomOrder(numberOfPeople));
		// numberOfPeople is the instance variable of the object calling the simulateCoatExperiment method.  
		// note that RandomOrderGenerator.getRandomOrder calls the method to generate an array of random numbers from the RandomOrderGenerator Class
		// numPpleWhoGotTheirCoat is the method call using the random array generated by RandomeOrderGenerator.getRandomOrder call. 

		return experimentResults; // return the array named experimentResults
	}
	
	/**
	 * This method computes the probability of zero people getting their coats back
	 * over the entire number of experiment iterations run. by taking the number of
	 * times 0 people got their coats back and dividing by n (the number of
	 * iterations). The paramter input is an integer array that stores the number of
	 * people who got their coat back for each experiment iteration.
	 * 
	 * @param results
	 * @return probabilityZeroCoatsBack
	 */
	public double answerToQuestionA(int[] results) {
		double probabilityZeroCoatsBack = 0; // initialize the probability variable as zero to get started
		double SumOfNonZeroElements = 0; // initialize a variable to store the sum of non-zero elements in results array
											// the variable type is double so that the probability is calculated as a
											// floating decimal
		for (int i = 0; i < results.length; i++) { // iterate over each element of array results from index 0 to (length-1)
			if (results[i] == 0) {
				SumOfNonZeroElements = SumOfNonZeroElements + 1; // counter adds 1 when the results are zero
			}
			if (SumOfNonZeroElements > 0) { // only calculate new probabilityZeroCoatsBack if SumofNonZeroElements is
											// not zero to avoid division by zero error.

				probabilityZeroCoatsBack = (SumOfNonZeroElements / results.length);
			}
		}
		return probabilityZeroCoatsBack;
	}
	
	/**
	 * This method computes the average number of people getting their coats back
	 * over the entire number of experiment iterations run. Calculate by summing the
	 * number of times people got their coats back for each time the experiment runs
	 * and dividing by n (the number of iterations). The paramter input is an
	 * integer array that stores the number of people who got their coat back for
	 * each experiment iteration over 100,000 iterations.
	 * 
	 * @param results
	 * @return averageNumberOfCoatsBack
	 */
	public double answerToQuestionB(int[] results) {
		double averageNumberOfPeopleGotCoatsBack = 0; // initialize the probability variable as zero to get started
		double SumOfPeopleGotTheirCoatBack = 0; // initialize a variable to store the sum of non-zero elements in
												// results array
		// the variable type is double so that the probability is calculated as a
		// floating decimal
		for (int i = 0; i < results.length; i++) { // iterate over each element of array results from index 0 to
													// (length-1)
			SumOfPeopleGotTheirCoatBack = SumOfPeopleGotTheirCoatBack + results[i]; // add each element value to the
																					// total
		}
		averageNumberOfPeopleGotCoatsBack = (SumOfPeopleGotTheirCoatBack / results.length); // average = total/#
																							// iterations in array.
		return averageNumberOfPeopleGotCoatsBack;
	}
	
	
	
	
		
	//This is the main method
		public static void main(String[] args) {
			CoatExperimentSimulator coatExperimentSimulator25 = new CoatExperimentSimulator(25); //declare a class object for 25 people		
																								// as per the assignment definition.
			
			//run the simulation 100,000 times and put the results into an array called results so it can be printed:
			
			System.out.println(Arrays.toString(coatExperimentSimulator25.simulateCoatExperiment(100000)));  //run 100,000 times per assignment
			
			// this line of code prints out the probability of zero people getting their coats back after running the simulation 100,000 times:
			
			System.out.println(coatExperimentSimulator25.answerToQuestionA(coatExperimentSimulator25.simulateCoatExperiment(100000)));
			
			
			System.out.println(coatExperimentSimulator25.answerToQuestionB(coatExperimentSimulator25.simulateCoatExperiment(100000)));
			
			/*  Leave this out while testing the method call for simulateCoatExperiment 
			 * 
			int n = coatExperimentSimulator25.getNumberOfPeople();  //set the number of people in the experiment
			
			int[] randomArrangementFromOneToN = RandomOrderGenerator.getRandomOrder(n);  //generate a random array randomArrangementFromOnetoN
			 
			
			System.out.println("This is random array for " + coatExperimentSimulator25.getNumberOfPeople() + " People attending party");
			System.out.println(Arrays.toString(randomArrangementFromOneToN));  //print array randomArrangementFromOnetoN
			System.out.println("Based on this outcome, there were this many people who got their own coat back :");
			System.out.println(coatExperimentSimulator25.numPplWhoGotTheirCoat(randomArrangementFromOneToN));
			*/
	}


}
